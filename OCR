class OCR(nn.Module):
    def __init__(self, num_classes):
        super(OCR, self).__init__()
        self.conv1 = nn.Conv2d(1, 64, kernel_size=3, padding=1)
        self.bn1 = nn.BatchNorm2d(64)
        self.pool = nn.MaxPool2d(2, 2)
        
        self.conv2 = nn.Conv2d(64, 128, kernel_size=3, padding=1)
        self.bn2 = nn.BatchNorm2d(128)
        
        self.lstm = nn.LSTM(128 * 8 * 8, 256, bidirectional=True, batch_first=True) #Long Short Term Memory used for learnearning, and classifying sequential data
        self.fc = nn.Linear(512, num_classes)
        
    def forward(self, x):
        x = self.pool(F.relu(self.bn1(self.conv1(x))))
        x = self.pool(F.relu(self.bn2(self.conv2(x))))
        x = x.view(x.size(0), -1)  # Flatten the output
        x, _ = self.lstm(x.unsqueeze(1))
        x = self.fc(x.squeeze(1))
        return x
